\begin{Verbatim}[commandchars=\\\{\}]
\PYG{c+cp}{\PYGZsh{}include} \PYG{c+cpf}{\PYGZdq{}PartI.h\PYGZdq{}}

\PYG{k}{using} \PYG{k}{namespace} \PYG{n}{std}\PYG{p}{;}

\PYG{k+kt}{bool} \PYG{k}{operator}\PYG{o}{\PYGZlt{}}\PYG{p}{(}\PYG{k}{const} \PYG{n}{pair}\PYG{o}{\PYGZlt{}}\PYG{k+kt}{int}\PYG{p}{,} \PYG{k+kt}{int}\PYG{o}{\PYGZgt{}\PYGZam{}} \PYG{n}{a}\PYG{p}{,} \PYG{k}{const} \PYG{n}{pair}\PYG{o}{\PYGZlt{}}\PYG{k+kt}{int}\PYG{p}{,} \PYG{k+kt}{int}\PYG{o}{\PYGZgt{}\PYGZam{}} \PYG{n}{b}\PYG{p}{)\PYGZob{}}
    \PYG{k}{return} \PYG{p}{(}\PYG{n}{a}\PYG{p}{.}\PYG{n}{first} \PYG{o}{\PYGZlt{}} \PYG{n}{b}\PYG{p}{.}\PYG{n}{first}\PYG{p}{)} \PYG{o}{||} \PYG{p}{(}\PYG{n}{a}\PYG{p}{.}\PYG{n}{first} \PYG{o}{==} \PYG{n}{b}\PYG{p}{.}\PYG{n}{first} \PYG{o}{\PYGZam{}\PYGZam{}} \PYG{n}{a}\PYG{p}{.}\PYG{n}{second} \PYG{o}{\PYGZlt{}} \PYG{n}{b}\PYG{p}{.}\PYG{n}{second}\PYG{p}{);}
\PYG{p}{\PYGZcb{}}

\PYG{k+kt}{void} \PYG{n}{PartI}\PYG{o}{::}\PYG{n}{read}\PYG{p}{(}\PYG{n}{string} \PYG{n}{file}\PYG{p}{)} \PYG{p}{\PYGZob{}}
    \PYG{n}{cout} \PYG{o}{\PYGZlt{}\PYGZlt{}} \PYG{l+s}{\PYGZdq{}Part I reading...\PYGZdq{}} \PYG{o}{\PYGZlt{}\PYGZlt{}} \PYG{n}{endl}\PYG{p}{;}
    \PYG{n}{ifstream} \PYG{n+nf}{ifs}\PYG{p}{(}\PYG{n}{file}\PYG{p}{);} \PYG{c+c1}{// Use input file stream to read input from file}
    \PYG{n}{ifs} \PYG{o}{\PYGZgt{}\PYGZgt{}} \PYG{n}{n} \PYG{o}{\PYGZgt{}\PYGZgt{}} \PYG{n}{m}\PYG{p}{;} \PYG{c+c1}{// Get \PYGZsh{} of vertices n and \PYGZsh{} of edges m}
    \PYG{c+c1}{// Resize the vector}
    \PYG{n}{graph}\PYG{p}{.}\PYG{n}{resize}\PYG{p}{(}\PYG{n}{n}\PYG{p}{);}
    \PYG{n}{rev\PYGZus{}graph}\PYG{p}{.}\PYG{n}{resize}\PYG{p}{(}\PYG{n}{n}\PYG{p}{);}
    \PYG{n}{scc}\PYG{p}{.}\PYG{n}{resize}\PYG{p}{(}\PYG{n}{n}\PYG{p}{);}
    \PYG{k+kt}{int} \PYG{n}{u}\PYG{p}{,} \PYG{n}{v}\PYG{p}{,} \PYG{n}{w}\PYG{p}{;}

    \PYG{c+c1}{// Build graph}
    \PYG{k}{for}\PYG{p}{(}\PYG{k+kt}{int} \PYG{n}{i}\PYG{o}{=}\PYG{l+m+mi}{0}\PYG{p}{;}\PYG{n}{i}\PYG{o}{\PYGZlt{}}\PYG{n}{m}\PYG{p}{;}\PYG{n}{i}\PYG{o}{++}\PYG{p}{)\PYGZob{}}
        \PYG{n}{ifs} \PYG{o}{\PYGZgt{}\PYGZgt{}} \PYG{n}{u} \PYG{o}{\PYGZgt{}\PYGZgt{}} \PYG{n}{v} \PYG{o}{\PYGZgt{}\PYGZgt{}} \PYG{n}{w}\PYG{p}{;}
        \PYG{n}{graph}\PYG{p}{[}\PYG{n}{u}\PYG{p}{].}\PYG{n}{push\PYGZus{}back}\PYG{p}{(\PYGZob{}}\PYG{n}{v}\PYG{p}{,} \PYG{l+m+mi}{1}\PYG{p}{\PYGZcb{});}
        \PYG{n}{rev\PYGZus{}graph}\PYG{p}{[}\PYG{n}{v}\PYG{p}{].}\PYG{n}{push\PYGZus{}back}\PYG{p}{(\PYGZob{}}\PYG{n}{u}\PYG{p}{,} \PYG{l+m+mi}{1}\PYG{p}{\PYGZcb{});}
    \PYG{p}{\PYGZcb{}}
    \PYG{c+c1}{// Close the ifstream}
    \PYG{n}{ifs}\PYG{p}{.}\PYG{n}{close}\PYG{p}{();}

    \PYG{c+c1}{// Because we need to traverse from smallest index to the largest, thus we need to sort the adj. list}
    \PYG{k}{for}\PYG{p}{(}\PYG{k+kt}{int} \PYG{n}{i}\PYG{o}{=}\PYG{l+m+mi}{0}\PYG{p}{;}\PYG{n}{i}\PYG{o}{\PYGZlt{}}\PYG{n}{n}\PYG{p}{;}\PYG{n}{i}\PYG{o}{++}\PYG{p}{)\PYGZob{}}
        \PYG{n}{sort}\PYG{p}{(}\PYG{n}{graph}\PYG{p}{[}\PYG{n}{i}\PYG{p}{].}\PYG{n}{begin}\PYG{p}{(),} \PYG{n}{graph}\PYG{p}{[}\PYG{n}{i}\PYG{p}{].}\PYG{n}{end}\PYG{p}{());}
    \PYG{p}{\PYGZcb{}}
\PYG{p}{\PYGZcb{}}

\PYG{k+kt}{void} \PYG{n}{PartI}\PYG{o}{::}\PYG{n}{solve}\PYG{p}{()} \PYG{p}{\PYGZob{}}
    \PYG{n}{cout} \PYG{o}{\PYGZlt{}\PYGZlt{}} \PYG{l+s}{\PYGZdq{}Part I solving...\PYGZdq{}} \PYG{o}{\PYGZlt{}\PYGZlt{}} \PYG{n}{endl}\PYG{p}{;}
    \PYG{k}{for}\PYG{p}{(}\PYG{k+kt}{int} \PYG{n}{i}\PYG{o}{=}\PYG{l+m+mi}{0}\PYG{p}{;}\PYG{n}{i}\PYG{o}{\PYGZlt{}}\PYG{n}{n}\PYG{p}{;}\PYG{n}{i}\PYG{o}{++}\PYG{p}{)\PYGZob{}}
        \PYG{c+c1}{// Run DFS for not yet traversed vertex}
        \PYG{k}{if}\PYG{p}{(}\PYG{n}{finish}\PYG{p}{[}\PYG{n}{i}\PYG{p}{]} \PYG{o}{==} \PYG{l+m+mi}{0}\PYG{p}{)\PYGZob{}}
            \PYG{n}{dfs}\PYG{p}{(}\PYG{n}{i}\PYG{p}{);}
        \PYG{p}{\PYGZcb{}}
    \PYG{p}{\PYGZcb{}}

    \PYG{k}{if}\PYG{p}{(}\PYG{n}{isAyclic}\PYG{p}{)\PYGZob{}}
        \PYG{c+c1}{// If is acylic, then reverse the order to get real topological ordering}
        \PYG{n}{reverse}\PYG{p}{(}\PYG{n}{order}\PYG{p}{.}\PYG{n}{begin}\PYG{p}{(),} \PYG{n}{order}\PYG{p}{.}\PYG{n}{end}\PYG{p}{());}
        \PYG{k}{return}\PYG{p}{;}
    \PYG{p}{\PYGZcb{}}

\PYG{p}{\PYGZcb{}}

\PYG{k+kt}{void} \PYG{n}{PartI}\PYG{o}{::}\PYG{n}{write}\PYG{p}{(}\PYG{n}{string} \PYG{n}{file}\PYG{p}{)} \PYG{p}{\PYGZob{}}
    \PYG{n}{cout} \PYG{o}{\PYGZlt{}\PYGZlt{}} \PYG{l+s}{\PYGZdq{}Part I writing...\PYGZdq{}} \PYG{o}{\PYGZlt{}\PYGZlt{}} \PYG{n}{endl}\PYG{p}{;}
    \PYG{n}{ofstream} \PYG{n+nf}{ofs}\PYG{p}{(}\PYG{n}{file}\PYG{p}{);} \PYG{c+c1}{// use output filestream to write output to file}
    \PYG{k}{if}\PYG{p}{(}\PYG{n}{isAyclic}\PYG{p}{)\PYGZob{}}
        \PYG{c+c1}{// Write the topological ordering to file}
        \PYG{k}{for}\PYG{p}{(}\PYG{k}{auto} \PYG{n+nl}{i}\PYG{p}{:} \PYG{n}{order}\PYG{p}{)\PYGZob{}}
            \PYG{n}{ofs} \PYG{o}{\PYGZlt{}\PYGZlt{}} \PYG{n}{i} \PYG{o}{\PYGZlt{}\PYGZlt{}} \PYG{l+s}{\PYGZdq{} \PYGZdq{}}\PYG{p}{;}
        \PYG{p}{\PYGZcb{}}
        \PYG{n}{ofs} \PYG{o}{\PYGZlt{}\PYGZlt{}} \PYG{n}{endl}\PYG{p}{;}
        \PYG{c+c1}{// After writing the to the file, directly exit the function}
        \PYG{k}{return}\PYG{p}{;}
    \PYG{p}{\PYGZcb{}}
    \PYG{c+c1}{// If not ayclic, then run Kosaraju\PYGZsq{}s algorithtm to find SCC}
    \PYG{n}{kosaraju}\PYG{p}{();}
    \PYG{c+c1}{// After running Kosaraju\PYGZsq{}s algorithtm, vertex will have a label which indicates that which SCC it belongs to.}
    \PYG{c+c1}{// This information will save in vector\PYGZlt{}int\PYGZgt{} scc.}
    \PYG{c+c1}{// cnt is \PYGZsh{} of SCC in the given graph.}
    \PYG{n}{scc\PYGZus{}vertex}\PYG{p}{.}\PYG{n}{resize}\PYG{p}{(}\PYG{n}{cnt}\PYG{p}{,} \PYG{p}{\PYGZob{}}\PYG{l+m+mf}{1e9}\PYG{p}{,} \PYG{p}{\PYGZob{}\PYGZcb{}\PYGZcb{});} \PYG{c+c1}{// scc\PYGZus{}vertex will save the minimum index and every vertex in each SCC.}
    \PYG{c+c1}{// Iterate all vertices in the graph.}
    \PYG{k}{for}\PYG{p}{(}\PYG{k+kt}{int} \PYG{n}{i}\PYG{o}{=}\PYG{l+m+mi}{0}\PYG{p}{;}\PYG{n}{i}\PYG{o}{\PYGZlt{}}\PYG{n}{n}\PYG{p}{;}\PYG{n}{i}\PYG{o}{++}\PYG{p}{)\PYGZob{}}
        \PYG{k+kt}{int} \PYG{n}{u} \PYG{o}{=} \PYG{n}{scc}\PYG{p}{[}\PYG{n}{i}\PYG{p}{];}
        \PYG{n}{scc\PYGZus{}vertex}\PYG{p}{[}\PYG{n}{u}\PYG{p}{].}\PYG{n}{first} \PYG{o}{=} \PYG{n}{min}\PYG{p}{(}\PYG{n}{scc\PYGZus{}vertex}\PYG{p}{[}\PYG{n}{u}\PYG{p}{].}\PYG{n}{first}\PYG{p}{,} \PYG{n}{i}\PYG{p}{);}
        \PYG{n}{scc\PYGZus{}vertex}\PYG{p}{[}\PYG{n}{u}\PYG{p}{].}\PYG{n}{second}\PYG{p}{.}\PYG{n}{push\PYGZus{}back}\PYG{p}{(}\PYG{n}{i}\PYG{p}{);}
    \PYG{p}{\PYGZcb{}}
    \PYG{n}{sort}\PYG{p}{(}\PYG{n}{scc\PYGZus{}vertex}\PYG{p}{.}\PYG{n}{begin}\PYG{p}{(),} \PYG{n}{scc\PYGZus{}vertex}\PYG{p}{.}\PYG{n}{end}\PYG{p}{());} \PYG{c+c1}{// Sort the SCCs based on the minimum index.}

    \PYG{c+c1}{// Relabel the vertices to match the new index value of every SCC}
    \PYG{k}{for}\PYG{p}{(}\PYG{k+kt}{int} \PYG{n}{i}\PYG{o}{=}\PYG{l+m+mi}{0}\PYG{p}{;}\PYG{n}{i}\PYG{o}{\PYGZlt{}}\PYG{n}{cnt}\PYG{p}{;}\PYG{n}{i}\PYG{o}{++}\PYG{p}{)\PYGZob{}}
        \PYG{k}{for}\PYG{p}{(}\PYG{k}{auto} \PYG{n+nl}{j}\PYG{p}{:} \PYG{n}{scc\PYGZus{}vertex}\PYG{p}{[}\PYG{n}{i}\PYG{p}{].}\PYG{n}{second}\PYG{p}{)\PYGZob{}}
            \PYG{n}{scc}\PYG{p}{[}\PYG{n}{j}\PYG{p}{]} \PYG{o}{=} \PYG{n}{i}\PYG{p}{;}
        \PYG{p}{\PYGZcb{}}
    \PYG{p}{\PYGZcb{}}

    \PYG{c+c1}{// Build coarse graph}
    \PYG{n}{buildGraph}\PYG{p}{();}
    \PYG{c+c1}{// After running the above function, we will get the coarse graph and save as map.}

    \PYG{n}{ofs} \PYG{o}{\PYGZlt{}\PYGZlt{}} \PYG{n}{cnt} \PYG{o}{\PYGZlt{}\PYGZlt{}} \PYG{l+s}{\PYGZdq{} \PYGZdq{}} \PYG{o}{\PYGZlt{}\PYGZlt{}} \PYG{n}{scc\PYGZus{}graph}\PYG{p}{.}\PYG{n}{size}\PYG{p}{()} \PYG{o}{\PYGZlt{}\PYGZlt{}} \PYG{n}{endl}\PYG{p}{;} \PYG{c+c1}{// Output the \PYGZsh{} of vertcies and edges}

    \PYG{c+c1}{// Because map will sort by key, we don\PYGZsq{}t need to sort the map.}
    \PYG{k}{for}\PYG{p}{(}\PYG{k}{auto} \PYG{n+nl}{i}\PYG{p}{:} \PYG{n}{scc\PYGZus{}graph}\PYG{p}{)\PYGZob{}}
        \PYG{n}{ofs} \PYG{o}{\PYGZlt{}\PYGZlt{}} \PYG{n}{i}\PYG{p}{.}\PYG{n}{first}\PYG{p}{.}\PYG{n}{first} \PYG{o}{\PYGZlt{}\PYGZlt{}} \PYG{l+s}{\PYGZdq{} \PYGZdq{}} \PYG{o}{\PYGZlt{}\PYGZlt{}} \PYG{n}{i}\PYG{p}{.}\PYG{n}{first}\PYG{p}{.}\PYG{n}{second} \PYG{o}{\PYGZlt{}\PYGZlt{}} \PYG{l+s}{\PYGZdq{} \PYGZdq{}} \PYG{o}{\PYGZlt{}\PYGZlt{}} \PYG{n}{i}\PYG{p}{.}\PYG{n}{second} \PYG{o}{\PYGZlt{}\PYGZlt{}} \PYG{n}{endl}\PYG{p}{;}
    \PYG{p}{\PYGZcb{}}

    \PYG{c+c1}{// Close output filestream}
    \PYG{n}{ofs}\PYG{p}{.}\PYG{n}{close}\PYG{p}{();}
    \PYG{k}{return}\PYG{p}{;}
\PYG{p}{\PYGZcb{}}

\PYG{k+kt}{void} \PYG{n}{PartI}\PYG{o}{::}\PYG{n}{dfs}\PYG{p}{(}\PYG{k+kt}{int} \PYG{n}{v}\PYG{p}{)\PYGZob{}}
    \PYG{c+c1}{// Back edge, cyclic}
    \PYG{k}{if}\PYG{p}{(}\PYG{n}{finish}\PYG{p}{[}\PYG{n}{v}\PYG{p}{]} \PYG{o}{==} \PYG{l+m+mi}{1}\PYG{p}{)\PYGZob{}}
        \PYG{n}{isAyclic} \PYG{o}{=} \PYG{n+nb}{false}\PYG{p}{;}
        \PYG{k}{return}\PYG{p}{;}
    \PYG{p}{\PYGZcb{}}

    \PYG{c+c1}{// forward edge or cross edge}
    \PYG{k}{if}\PYG{p}{(}\PYG{n}{finish}\PYG{p}{[}\PYG{n}{v}\PYG{p}{]} \PYG{o}{==} \PYG{l+m+mi}{2}\PYG{p}{)\PYGZob{}}
        \PYG{k}{return}\PYG{p}{;}
    \PYG{p}{\PYGZcb{}}

    \PYG{c+c1}{// mark 1}
    \PYG{n}{finish}\PYG{p}{[}\PYG{n}{v}\PYG{p}{]} \PYG{o}{=} \PYG{l+m+mi}{1}\PYG{p}{;}
    \PYG{k}{for}\PYG{p}{(}\PYG{k}{auto} \PYG{n+nl}{i}\PYG{p}{:} \PYG{n}{graph}\PYG{p}{[}\PYG{n}{v}\PYG{p}{])\PYGZob{}}
        \PYG{n}{dfs}\PYG{p}{(}\PYG{n}{i}\PYG{p}{.}\PYG{n}{first}\PYG{p}{);}
    \PYG{p}{\PYGZcb{}}

    \PYG{c+c1}{// mark 2}
    \PYG{n}{finish}\PYG{p}{[}\PYG{n}{v}\PYG{p}{]} \PYG{o}{=} \PYG{l+m+mi}{2}\PYG{p}{;}
    \PYG{n}{order}\PYG{p}{.}\PYG{n}{push\PYGZus{}back}\PYG{p}{(}\PYG{n}{v}\PYG{p}{);}
\PYG{p}{\PYGZcb{}}

\PYG{k+kt}{void} \PYG{n}{PartI}\PYG{o}{::}\PYG{n}{scc\PYGZus{}revdfs}\PYG{p}{(}\PYG{k+kt}{int} \PYG{n}{v}\PYG{p}{)\PYGZob{}}
    \PYG{c+c1}{// DFS runs on reverse graph}
    \PYG{n}{finish}\PYG{p}{[}\PYG{n}{v}\PYG{p}{]} \PYG{o}{=} \PYG{l+m+mi}{1}\PYG{p}{;}
    \PYG{k}{for}\PYG{p}{(}\PYG{k}{auto} \PYG{n+nl}{i}\PYG{p}{:} \PYG{n}{rev\PYGZus{}graph}\PYG{p}{[}\PYG{n}{v}\PYG{p}{])\PYGZob{}}
        \PYG{k}{if}\PYG{p}{(}\PYG{n}{finish}\PYG{p}{[}\PYG{n}{i}\PYG{p}{.}\PYG{n}{first}\PYG{p}{]} \PYG{o}{==} \PYG{l+m+mi}{0}\PYG{p}{)\PYGZob{}}
            \PYG{n}{scc\PYGZus{}revdfs}\PYG{p}{(}\PYG{n}{i}\PYG{p}{.}\PYG{n}{first}\PYG{p}{);}
        \PYG{p}{\PYGZcb{}}
    \PYG{p}{\PYGZcb{}}
    \PYG{n}{order}\PYG{p}{.}\PYG{n}{push\PYGZus{}back}\PYG{p}{(}\PYG{n}{v}\PYG{p}{);}
\PYG{p}{\PYGZcb{}}

\PYG{k+kt}{void} \PYG{n}{PartI}\PYG{o}{::}\PYG{n}{scc\PYGZus{}dfs}\PYG{p}{(}\PYG{k+kt}{int} \PYG{n}{cur}\PYG{p}{,} \PYG{k+kt}{int} \PYG{n}{s}\PYG{p}{)\PYGZob{}}
    \PYG{c+c1}{// DFS runs on graph and lable the vertices}
    \PYG{n}{scc}\PYG{p}{[}\PYG{n}{cur}\PYG{p}{]} \PYG{o}{=} \PYG{n}{s}\PYG{p}{;}
    \PYG{k}{for}\PYG{p}{(}\PYG{k}{auto} \PYG{n+nl}{i}\PYG{p}{:} \PYG{n}{graph}\PYG{p}{[}\PYG{n}{cur}\PYG{p}{])\PYGZob{}}
        \PYG{k+kt}{int} \PYG{n}{u} \PYG{o}{=} \PYG{n}{i}\PYG{p}{.}\PYG{n}{first}\PYG{p}{;}
        \PYG{k}{if}\PYG{p}{(}\PYG{n}{scc}\PYG{p}{[}\PYG{n}{u}\PYG{p}{]} \PYG{o}{==} \PYG{l+m+mi}{\PYGZhy{}1}\PYG{p}{)\PYGZob{}}
            \PYG{n}{scc\PYGZus{}dfs}\PYG{p}{(}\PYG{n}{u}\PYG{p}{,} \PYG{n}{s}\PYG{p}{);}
        \PYG{p}{\PYGZcb{}}
    \PYG{p}{\PYGZcb{}}
\PYG{p}{\PYGZcb{}}

\PYG{k+kt}{void} \PYG{n}{PartI}\PYG{o}{::}\PYG{n}{kosaraju}\PYG{p}{()\PYGZob{}}
    \PYG{n}{order}\PYG{p}{.}\PYG{n}{clear}\PYG{p}{();}  \PYG{c+c1}{// Clear the original order}
    \PYG{n}{finish}\PYG{p}{.}\PYG{n}{clear}\PYG{p}{();} \PYG{c+c1}{// Clear the vector}
    \PYG{n}{scc}\PYG{p}{.}\PYG{n}{resize}\PYG{p}{(}\PYG{n}{n}\PYG{p}{);}  \PYG{c+c1}{// Resize the vector that store vertex belongs to SCC}
    \PYG{n}{fill}\PYG{p}{(}\PYG{n}{scc}\PYG{p}{.}\PYG{n}{begin}\PYG{p}{(),} \PYG{n}{scc}\PYG{p}{.}\PYG{n}{end}\PYG{p}{(),} \PYG{l+m+mi}{\PYGZhy{}1}\PYG{p}{);} \PYG{c+c1}{// Fill the vector with \PYGZhy{}1}
    \PYG{k}{for}\PYG{p}{(}\PYG{k+kt}{int} \PYG{n}{i}\PYG{o}{=}\PYG{l+m+mi}{0}\PYG{p}{;}\PYG{n}{i}\PYG{o}{\PYGZlt{}}\PYG{n}{n}\PYG{p}{;}\PYG{n}{i}\PYG{o}{++}\PYG{p}{)\PYGZob{}}
        \PYG{k}{if}\PYG{p}{(}\PYG{n}{finish}\PYG{p}{[}\PYG{n}{i}\PYG{p}{]} \PYG{o}{==} \PYG{l+m+mi}{0}\PYG{p}{)\PYGZob{}} \PYG{c+c1}{// If not yet traversed, then run DFS on reverse graph.}
            \PYG{n}{scc\PYGZus{}revdfs}\PYG{p}{(}\PYG{n}{i}\PYG{p}{);}
        \PYG{p}{\PYGZcb{}}
    \PYG{p}{\PYGZcb{}}
    \PYG{n}{cnt} \PYG{o}{=} \PYG{l+m+mi}{0}\PYG{p}{;} \PYG{c+c1}{// Store the \PYGZsh{} of SCC}
    \PYG{n}{reverse}\PYG{p}{(}\PYG{n}{order}\PYG{p}{.}\PYG{n}{begin}\PYG{p}{(),} \PYG{n}{order}\PYG{p}{.}\PYG{n}{end}\PYG{p}{());}
    \PYG{c+c1}{// Use topological ordering of reverse graph to get SCC}
    \PYG{k}{for}\PYG{p}{(}\PYG{k}{auto} \PYG{n+nl}{i}\PYG{p}{:} \PYG{n}{order}\PYG{p}{)\PYGZob{}}
        \PYG{k}{if}\PYG{p}{(}\PYG{n}{scc}\PYG{p}{[}\PYG{n}{i}\PYG{p}{]} \PYG{o}{==} \PYG{l+m+mi}{\PYGZhy{}1}\PYG{p}{)\PYGZob{}}    \PYG{c+c1}{// Not in any SCC}
            \PYG{n}{scc\PYGZus{}dfs}\PYG{p}{(}\PYG{n}{i}\PYG{p}{,} \PYG{n}{cnt}\PYG{p}{);} \PYG{c+c1}{// Run DFS}
            \PYG{n}{cnt} \PYG{o}{++}\PYG{p}{;}
        \PYG{p}{\PYGZcb{}}
    \PYG{p}{\PYGZcb{}}
\PYG{p}{\PYGZcb{}}

\PYG{k+kt}{void} \PYG{n}{PartI}\PYG{o}{::}\PYG{n}{buildGraphDFS}\PYG{p}{(}\PYG{k+kt}{int} \PYG{n}{v}\PYG{p}{)\PYGZob{}}
    \PYG{n}{finish}\PYG{p}{[}\PYG{n}{v}\PYG{p}{]} \PYG{o}{=} \PYG{l+m+mi}{1}\PYG{p}{;}
    \PYG{k}{for}\PYG{p}{(}\PYG{k}{auto} \PYG{n+nl}{i}\PYG{p}{:} \PYG{n}{graph}\PYG{p}{[}\PYG{n}{v}\PYG{p}{])\PYGZob{}} \PYG{c+c1}{// Iterate all edges that connect to vertex v}
        \PYG{k+kt}{int} \PYG{n}{u} \PYG{o}{=} \PYG{n}{i}\PYG{p}{.}\PYG{n}{first}\PYG{p}{;}
        \PYG{k}{if}\PYG{p}{(}\PYG{n}{scc}\PYG{p}{[}\PYG{n}{v}\PYG{p}{]} \PYG{o}{!=} \PYG{n}{scc}\PYG{p}{[}\PYG{n}{u}\PYG{p}{])\PYGZob{}}
            \PYG{n}{scc\PYGZus{}graph}\PYG{p}{[\PYGZob{}}\PYG{n}{scc}\PYG{p}{[}\PYG{n}{v}\PYG{p}{],} \PYG{n}{scc}\PYG{p}{[}\PYG{n}{u}\PYG{p}{]\PYGZcb{}]} \PYG{o}{++}\PYG{p}{;} \PYG{c+c1}{// If two vertices belongs to different SCC, then this edge will appear in coarse graph and weight will plus 1}
        \PYG{p}{\PYGZcb{}}
        \PYG{k}{if}\PYG{p}{(}\PYG{n}{finish}\PYG{p}{[}\PYG{n}{u}\PYG{p}{]} \PYG{o}{==} \PYG{l+m+mi}{0}\PYG{p}{)\PYGZob{}} \PYG{c+c1}{// If not yet visited, then run DFS}
            \PYG{n}{buildGraphDFS}\PYG{p}{(}\PYG{n}{u}\PYG{p}{);}
        \PYG{p}{\PYGZcb{}}
    \PYG{p}{\PYGZcb{}}
\PYG{p}{\PYGZcb{}}

\PYG{k+kt}{void} \PYG{n}{PartI}\PYG{o}{::}\PYG{n}{buildGraph}\PYG{p}{()\PYGZob{}}
    \PYG{n}{finish}\PYG{p}{.}\PYG{n}{clear}\PYG{p}{();} \PYG{c+c1}{// Clear the vector that records visited vertices}
    \PYG{k}{for}\PYG{p}{(}\PYG{k+kt}{int} \PYG{n}{i}\PYG{o}{=}\PYG{l+m+mi}{0}\PYG{p}{;}\PYG{n}{i}\PYG{o}{\PYGZlt{}}\PYG{n}{n}\PYG{p}{;}\PYG{n}{i}\PYG{o}{++}\PYG{p}{)\PYGZob{}}
        \PYG{k}{if}\PYG{p}{(}\PYG{n}{finish}\PYG{p}{[}\PYG{n}{i}\PYG{p}{]} \PYG{o}{==} \PYG{l+m+mi}{0}\PYG{p}{)\PYGZob{}}
            \PYG{n}{buildGraphDFS}\PYG{p}{(}\PYG{n}{i}\PYG{p}{);}
        \PYG{p}{\PYGZcb{}}
    \PYG{p}{\PYGZcb{}}
\PYG{p}{\PYGZcb{}}
\end{Verbatim}
