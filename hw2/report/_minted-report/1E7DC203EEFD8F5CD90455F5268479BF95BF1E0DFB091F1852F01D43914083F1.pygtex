\begin{Verbatim}[commandchars=\\\{\}]
\PYG{c+cp}{\PYGZsh{}include} \PYG{c+cpf}{\PYGZdq{}PartII.h\PYGZdq{}}

\PYG{c+cp}{\PYGZsh{}define INF 1e9}

\PYG{k}{using} \PYG{k}{namespace} \PYG{n}{std}\PYG{p}{;}

\PYG{k+kt}{void} \PYG{n}{PartII}\PYG{o}{::}\PYG{n}{read}\PYG{p}{(}\PYG{n}{string} \PYG{n}{file}\PYG{p}{)} \PYG{p}{\PYGZob{}}
    \PYG{n}{cout} \PYG{o}{\PYGZlt{}\PYGZlt{}} \PYG{l+s}{\PYGZdq{}Part II reading...\PYGZdq{}} \PYG{o}{\PYGZlt{}\PYGZlt{}} \PYG{n}{endl}\PYG{p}{;}
    \PYG{n}{ifstream} \PYG{n+nf}{ifs}\PYG{p}{(}\PYG{n}{file}\PYG{p}{);} \PYG{c+c1}{// Decalre a input filestream to get input from file}
    \PYG{n}{ifs} \PYG{o}{\PYGZgt{}\PYGZgt{}} \PYG{n}{n} \PYG{o}{\PYGZgt{}\PYGZgt{}} \PYG{n}{m}\PYG{p}{;} \PYG{c+c1}{// input \PYGZsh{} of vertices and edges}
    \PYG{c+c1}{// Resize the vectors}
    \PYG{n}{d}\PYG{p}{.}\PYG{n}{resize}\PYG{p}{(}\PYG{n}{n}\PYG{p}{);}
    \PYG{n}{abs\PYGZus{}d}\PYG{p}{.}\PYG{n}{resize}\PYG{p}{(}\PYG{n}{n}\PYG{p}{);}
    \PYG{n}{adj}\PYG{p}{.}\PYG{n}{resize}\PYG{p}{(}\PYG{n}{n}\PYG{p}{);}
    \PYG{n}{abs\PYGZus{}adj}\PYG{p}{.}\PYG{n}{resize}\PYG{p}{(}\PYG{n}{n}\PYG{p}{);}

    \PYG{c+c1}{// Build graph from input}
    \PYG{k+kt}{int} \PYG{n}{u}\PYG{p}{,} \PYG{n}{v}\PYG{p}{,} \PYG{n}{w}\PYG{p}{;}
    \PYG{k}{for}\PYG{p}{(}\PYG{k+kt}{int} \PYG{n}{i}\PYG{o}{=}\PYG{l+m+mi}{0}\PYG{p}{;}\PYG{n}{i}\PYG{o}{\PYGZlt{}}\PYG{n}{m}\PYG{p}{;}\PYG{n}{i}\PYG{o}{++}\PYG{p}{)\PYGZob{}}
        \PYG{n}{ifs} \PYG{o}{\PYGZgt{}\PYGZgt{}} \PYG{n}{u} \PYG{o}{\PYGZgt{}\PYGZgt{}} \PYG{n}{v} \PYG{o}{\PYGZgt{}\PYGZgt{}} \PYG{n}{w}\PYG{p}{;}
        \PYG{n}{adj}\PYG{p}{[}\PYG{n}{u}\PYG{p}{].}\PYG{n}{push\PYGZus{}back}\PYG{p}{(\PYGZob{}}\PYG{n}{v}\PYG{p}{,} \PYG{n}{w}\PYG{p}{\PYGZcb{});}
        \PYG{n}{abs\PYGZus{}adj}\PYG{p}{[}\PYG{n}{u}\PYG{p}{].}\PYG{n}{push\PYGZus{}back}\PYG{p}{(\PYGZob{}}\PYG{n}{v}\PYG{p}{,} \PYG{n}{abs}\PYG{p}{(}\PYG{n}{w}\PYG{p}{)\PYGZcb{});}
    \PYG{p}{\PYGZcb{}}

    \PYG{n}{ifs}\PYG{p}{.}\PYG{n}{close}\PYG{p}{();}
\PYG{p}{\PYGZcb{}}
\PYG{k+kt}{void} \PYG{n}{PartII}\PYG{o}{::}\PYG{n}{solve}\PYG{p}{()} \PYG{p}{\PYGZob{}}
    \PYG{n}{cout} \PYG{o}{\PYGZlt{}\PYGZlt{}} \PYG{l+s}{\PYGZdq{}Part II solving...\PYGZdq{}} \PYG{o}{\PYGZlt{}\PYGZlt{}} \PYG{n}{endl}\PYG{p}{;}
    \PYG{n}{dijkstra}\PYG{p}{(}\PYG{l+m+mi}{0}\PYG{p}{);} \PYG{c+c1}{// Run from Dijkstra\PYGZsq{}s algorithm from node 0}

    \PYG{c+c1}{// Run Bellman\PYGZhy{}Ford algorithm from node 0.}
    \PYG{c+c1}{// And if function return false, it means there is negative cycle in the graph}
    \PYG{n}{hasNegCyc} \PYG{o}{=} \PYG{o}{!}\PYG{n}{bellmanFord}\PYG{p}{(}\PYG{l+m+mi}{0}\PYG{p}{);}
\PYG{p}{\PYGZcb{}}

\PYG{k+kt}{void} \PYG{n}{PartII}\PYG{o}{::}\PYG{n}{write}\PYG{p}{(}\PYG{n}{string} \PYG{n}{file}\PYG{p}{)} \PYG{p}{\PYGZob{}}
    \PYG{n}{cout} \PYG{o}{\PYGZlt{}\PYGZlt{}} \PYG{l+s}{\PYGZdq{}Part II writing...\PYGZdq{}} \PYG{o}{\PYGZlt{}\PYGZlt{}} \PYG{n}{endl}\PYG{p}{;}
    \PYG{n}{ofstream} \PYG{n+nf}{ofs}\PYG{p}{(}\PYG{n}{file}\PYG{p}{);}
    \PYG{n}{ofs} \PYG{o}{\PYGZlt{}\PYGZlt{}} \PYG{n}{abs\PYGZus{}d}\PYG{p}{[}\PYG{n}{n}\PYG{l+m+mi}{\PYGZhy{}1}\PYG{p}{]} \PYG{o}{\PYGZlt{}\PYGZlt{}} \PYG{n}{endl}\PYG{p}{;} \PYG{c+c1}{// Output the Dijkstra algorithm\PYGZsq{}s output}

    \PYG{k}{if}\PYG{p}{(}\PYG{n}{hasNegCyc}\PYG{p}{)\PYGZob{}}
        \PYG{n}{ofs} \PYG{o}{\PYGZlt{}\PYGZlt{}} \PYG{l+s}{\PYGZdq{}Negative loop detected!\PYGZdq{}} \PYG{o}{\PYGZlt{}\PYGZlt{}} \PYG{n}{endl}\PYG{p}{;} \PYG{c+c1}{// If has negative cycle, then output \PYGZdq{}Negative loop detected!\PYGZdq{}}
    \PYG{p}{\PYGZcb{}} \PYG{k}{else} \PYG{p}{\PYGZob{}}
        \PYG{n}{ofs} \PYG{o}{\PYGZlt{}\PYGZlt{}} \PYG{n}{d}\PYG{p}{[}\PYG{n}{n}\PYG{l+m+mi}{\PYGZhy{}1}\PYG{p}{]} \PYG{o}{\PYGZlt{}\PYGZlt{}} \PYG{n}{endl}\PYG{p}{;} \PYG{c+c1}{// Otherwise, output the Bellman\PYGZhy{}Ford algorithm\PYGZsq{}s output}
    \PYG{p}{\PYGZcb{}}

    \PYG{n}{ofs}\PYG{p}{.}\PYG{n}{close}\PYG{p}{();} \PYG{c+c1}{// Close output file stream}
\PYG{p}{\PYGZcb{}}


\PYG{k+kt}{void} \PYG{n}{PartII}\PYG{o}{::}\PYG{n}{dijkstra}\PYG{p}{(}\PYG{k+kt}{int} \PYG{n}{src}\PYG{p}{)\PYGZob{}}
    \PYG{n}{fill}\PYG{p}{(}\PYG{n}{abs\PYGZus{}d}\PYG{p}{.}\PYG{n}{begin}\PYG{p}{(),} \PYG{n}{abs\PYGZus{}d}\PYG{p}{.}\PYG{n}{end}\PYG{p}{(),} \PYG{n}{INF}\PYG{p}{);} \PYG{c+c1}{// Fill the distance vector w/ INF value}
    \PYG{n}{abs\PYGZus{}d}\PYG{p}{[}\PYG{n}{src}\PYG{p}{]} \PYG{o}{=} \PYG{l+m+mi}{0}\PYG{p}{;} \PYG{c+c1}{// The distance from node 0 to node 0 is 0}

    \PYG{c+c1}{// Use priority\PYGZus{}queue to get the vertex with the smallest distance from node 0 in every step}
    \PYG{n}{priority\PYGZus{}queue}\PYG{o}{\PYGZlt{}}\PYG{n}{pair}\PYG{o}{\PYGZlt{}}\PYG{k+kt}{int}\PYG{p}{,} \PYG{k+kt}{int}\PYG{o}{\PYGZgt{}}\PYG{p}{,} \PYG{n}{vector}\PYG{o}{\PYGZlt{}}\PYG{n}{pair}\PYG{o}{\PYGZlt{}}\PYG{k+kt}{int}\PYG{p}{,} \PYG{k+kt}{int}\PYG{o}{\PYGZgt{}\PYGZgt{}}\PYG{p}{,} \PYG{n}{greater}\PYG{o}{\PYGZlt{}}\PYG{n}{pair}\PYG{o}{\PYGZlt{}}\PYG{k+kt}{int}\PYG{p}{,} \PYG{k+kt}{int}\PYG{o}{\PYGZgt{}\PYGZgt{}\PYGZgt{}} \PYG{n}{pq}\PYG{p}{;} \PYG{c+c1}{// first: weight, second: vertex}

    \PYG{c+c1}{// Push the initial node 0 to pq}
    \PYG{n}{pq}\PYG{p}{.}\PYG{n}{push}\PYG{p}{(\PYGZob{}}\PYG{l+m+mi}{0}\PYG{p}{,} \PYG{l+m+mi}{0}\PYG{p}{\PYGZcb{});}

    \PYG{c+c1}{// If pq is not empty, keep running the relax process}
    \PYG{k}{while}\PYG{p}{(}\PYG{o}{!}\PYG{n}{pq}\PYG{p}{.}\PYG{n}{empty}\PYG{p}{())\PYGZob{}}
        \PYG{k}{auto} \PYG{n}{edge} \PYG{o}{=} \PYG{n}{pq}\PYG{p}{.}\PYG{n}{top}\PYG{p}{();}
        \PYG{n}{pq}\PYG{p}{.}\PYG{n}{pop}\PYG{p}{();}
        \PYG{k+kt}{int} \PYG{n}{u} \PYG{o}{=} \PYG{n}{edge}\PYG{p}{.}\PYG{n}{second}\PYG{p}{;}
        \PYG{k}{for}\PYG{p}{(}\PYG{k}{auto} \PYG{n+nl}{i}\PYG{p}{:} \PYG{n}{abs\PYGZus{}adj}\PYG{p}{[}\PYG{n}{u}\PYG{p}{])\PYGZob{}}
            \PYG{k+kt}{int} \PYG{n}{w} \PYG{o}{=} \PYG{n}{i}\PYG{p}{.}\PYG{n}{first}\PYG{p}{;}
            \PYG{k+kt}{int} \PYG{n}{v} \PYG{o}{=} \PYG{n}{i}\PYG{p}{.}\PYG{n}{second}\PYG{p}{;}
            \PYG{k+kt}{int} \PYG{n}{alt} \PYG{o}{=} \PYG{n}{abs\PYGZus{}d}\PYG{p}{[}\PYG{n}{u}\PYG{p}{]} \PYG{o}{+} \PYG{n}{i}\PYG{p}{.}\PYG{n}{first}\PYG{p}{;} \PYG{c+c1}{// Alternate path\PYGZsq{}s distance}

            \PYG{c+c1}{// If alternate distance less than current distance save in distance vector}
            \PYG{k}{if}\PYG{p}{(}\PYG{n}{alt} \PYG{o}{\PYGZlt{}} \PYG{n}{abs\PYGZus{}d}\PYG{p}{[}\PYG{n}{v}\PYG{p}{])\PYGZob{}}
                \PYG{n}{abs\PYGZus{}d}\PYG{p}{[}\PYG{n}{v}\PYG{p}{]} \PYG{o}{=} \PYG{n}{alt}\PYG{p}{;}    \PYG{c+c1}{// Update the distance in distance vector}
                \PYG{n}{pq}\PYG{p}{.}\PYG{n}{push}\PYG{p}{(\PYGZob{}}\PYG{n}{alt}\PYG{p}{,} \PYG{n}{v}\PYG{p}{\PYGZcb{});} \PYG{c+c1}{// Update the new distance to pq}
            \PYG{p}{\PYGZcb{}}
        \PYG{p}{\PYGZcb{}}
    \PYG{p}{\PYGZcb{}}
\PYG{p}{\PYGZcb{}}

\PYG{k+kt}{bool} \PYG{n}{PartII}\PYG{o}{::}\PYG{n}{bellmanFord}\PYG{p}{(}\PYG{k+kt}{int} \PYG{n}{src}\PYG{p}{)\PYGZob{}}
    \PYG{n}{fill}\PYG{p}{(}\PYG{n}{d}\PYG{p}{.}\PYG{n}{begin}\PYG{p}{(),} \PYG{n}{d}\PYG{p}{.}\PYG{n}{end}\PYG{p}{(),} \PYG{n}{INF}\PYG{p}{);} \PYG{c+c1}{// Fill the distance vector w/ INF value}
    \PYG{n}{d}\PYG{p}{[}\PYG{n}{src}\PYG{p}{]} \PYG{o}{=} \PYG{l+m+mi}{0}\PYG{p}{;} \PYG{c+c1}{// The distance from node 0 to node 0 is 0}

    \PYG{c+c1}{// Run n\PYGZhy{}1 times of relaxation process}
    \PYG{k}{for}\PYG{p}{(}\PYG{k+kt}{int} \PYG{n}{i}\PYG{o}{=}\PYG{l+m+mi}{0}\PYG{p}{;}\PYG{n}{i}\PYG{o}{\PYGZlt{}}\PYG{n}{n}\PYG{l+m+mi}{\PYGZhy{}1}\PYG{p}{;}\PYG{n}{i}\PYG{o}{++}\PYG{p}{)\PYGZob{}}
        \PYG{k}{for}\PYG{p}{(}\PYG{k+kt}{int} \PYG{n}{u}\PYG{o}{=}\PYG{l+m+mi}{0}\PYG{p}{;}\PYG{n}{u}\PYG{o}{\PYGZlt{}}\PYG{n}{n}\PYG{p}{;}\PYG{n}{u}\PYG{o}{++}\PYG{p}{)\PYGZob{}}
            \PYG{k}{for}\PYG{p}{(}\PYG{k}{auto} \PYG{n+nl}{k}\PYG{p}{:} \PYG{n}{adj}\PYG{p}{[}\PYG{n}{u}\PYG{p}{])\PYGZob{}}
                \PYG{k+kt}{int} \PYG{n}{v} \PYG{o}{=} \PYG{n}{k}\PYG{p}{.}\PYG{n}{first}\PYG{p}{;}
                \PYG{k+kt}{int} \PYG{n}{w} \PYG{o}{=} \PYG{n}{k}\PYG{p}{.}\PYG{n}{second}\PYG{p}{;}
                \PYG{k+kt}{int} \PYG{n}{alt} \PYG{o}{=} \PYG{n}{d}\PYG{p}{[}\PYG{n}{u}\PYG{p}{]} \PYG{o}{+} \PYG{n}{w}\PYG{p}{;}

                \PYG{c+c1}{// If alternate distance less than current distance save in distance vector}
                \PYG{k}{if}\PYG{p}{(}\PYG{n}{alt} \PYG{o}{\PYGZlt{}} \PYG{n}{d}\PYG{p}{[}\PYG{n}{v}\PYG{p}{])\PYGZob{}}
                    \PYG{n}{d}\PYG{p}{[}\PYG{n}{v}\PYG{p}{]} \PYG{o}{=} \PYG{n}{alt}\PYG{p}{;} \PYG{c+c1}{// Update the distance in distance vector}
                \PYG{p}{\PYGZcb{}}
            \PYG{p}{\PYGZcb{}}
        \PYG{p}{\PYGZcb{}}
    \PYG{p}{\PYGZcb{}}


    \PYG{k}{for}\PYG{p}{(}\PYG{k+kt}{int} \PYG{n}{u}\PYG{o}{=}\PYG{l+m+mi}{0}\PYG{p}{;}\PYG{n}{u}\PYG{o}{\PYGZlt{}}\PYG{n}{n}\PYG{p}{;}\PYG{n}{u}\PYG{o}{++}\PYG{p}{)\PYGZob{}}
        \PYG{k}{for}\PYG{p}{(}\PYG{k}{auto} \PYG{n+nl}{k}\PYG{p}{:} \PYG{n}{adj}\PYG{p}{[}\PYG{n}{u}\PYG{p}{])\PYGZob{}}
            \PYG{k+kt}{int} \PYG{n}{v} \PYG{o}{=} \PYG{n}{k}\PYG{p}{.}\PYG{n}{first}\PYG{p}{;}
            \PYG{k+kt}{int} \PYG{n}{w} \PYG{o}{=} \PYG{n}{k}\PYG{p}{.}\PYG{n}{second}\PYG{p}{;}
            \PYG{k+kt}{int} \PYG{n}{alt} \PYG{o}{=} \PYG{n}{d}\PYG{p}{[}\PYG{n}{u}\PYG{p}{]} \PYG{o}{+} \PYG{n}{w}\PYG{p}{;}
            \PYG{k}{if}\PYG{p}{(}\PYG{n}{alt} \PYG{o}{\PYGZlt{}} \PYG{n}{d}\PYG{p}{[}\PYG{n}{v}\PYG{p}{])\PYGZob{}}
                \PYG{c+c1}{// If there still have edge that can be relaxed in nth times of relaxation process.}
                \PYG{c+c1}{// Then there exists a negative cycle}
                \PYG{k}{return} \PYG{n+nb}{false}\PYG{p}{;}
            \PYG{p}{\PYGZcb{}}
        \PYG{p}{\PYGZcb{}}
    \PYG{p}{\PYGZcb{}}

    \PYG{k}{return} \PYG{n+nb}{true}\PYG{p}{;}
\PYG{p}{\PYGZcb{}}
\end{Verbatim}
